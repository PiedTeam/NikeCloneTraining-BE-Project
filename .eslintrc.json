{
    "env": { "node": true, "browser": true },
    "$schema": "https://json.schemastore.org/eslintrc",
    // "root": true,
    "plugins": [
        "prettier",
        "@typescript-eslint",
        // "@stylistic",
        "import",
        "promise"
    ],
    "ignorePatterns": ["node_modules/", "dist/", "server.js", "*.d.ts"],
    "extends": [
        // extends mean use config from devDependencies that community created or recommended

        // default eslint
        "eslint:recommended", //@eslint/js (@eslint/js and eslint package in package.json is the same thing)

        // PLUGIN

        // javascript
        "plugin:promise/recommended", //eslint-plugin-promise
        "plugin:import/recommended", //eslint-plugin-import

        // typescript eslint
        "plugin:@typescript-eslint/recommended", //@typescript-eslint/eslint-plugin
        "plugin:@typescript-eslint/stylistic", //@typescript-eslint/eslint-plugin
        "plugin:@typescript-eslint/recommended-type-checked", //@typescript-eslint/eslint-plugin
        "plugin:@typescript-eslint/stylistic-type-checked", //@typescript-eslint/eslint-plugin
        "plugin:import/typescript", //eslint-plugin-import and eslint-import-resolver-typescript

        // eslint stylistic
        // "plugin:@stylistic/recommended-extends", //@stylistic/eslint-plugin

        // prettier THIS MUST BE LAST
        "plugin:prettier/recommended", //eslint-PLUGIN-prettier //disable because focus on new @stylistic/eslint-plugin
        "prettier" //eslint-CONFIG-prettier (turn off eslint **rules** that conflict with prettier), turn on prettier/prettier rules
        //eslint-CONFIG-prettier is used in "check-conflict-prettier-eslint" in package.json
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "sourceType": "module",
        "ecmaVersion": 2020,
        "project": ["./tsconfig.json"]
    },
    "rules": {
        // rule that override the extends config above
        // normal code
        "no-console": "error",
        "require-await": "error",
        "eqeqeq": "error",
        "no-nested-ternary": "error",

        // eslint stylistic
        // "@stylistic/quotes": ["error", "double"],
        // "@stylistic/jsx-one-expression-per-line": "off",
        // "@stylistic/semi": ["error", "always"],
        // "@stylistic/arrow-parens": ["error", "always"],
        // "@stylistic/brace-style": ["error", "1tbs", { "allowSingleLine": true }],
        // "@stylistic/member-delimiter-style": [
        //   "error",
        //   {
        //     "multiline": { "delimiter": "semi", "requireLast": true },
        //     "singleline": { "delimiter": "semi", "requireLast": false }
        //   }
        // ],

        // plugin
        "import/no-unresolved": "error", //eslint-plugin-import and eslint-import-resolver-typescript

        // typescript
        "@typescript-eslint/no-unsafe-argument": "warn", // WARN BECAUSE TOO MUCH TO FIX IN THE TIME
        "@typescript-eslint/no-unsafe-member-access": "warn", // WARN BECAUSE TOO MUCH TO FIX IN THE TIME
        "@typescript-eslint/no-unsafe-assignment": "warn", // WARN BECAUSE TOO MUCH TO FIX IN THE TIME
        "@typescript-eslint/no-explicit-any": "warn", // WARN BECAUSE TOO MUCH TO FIX IN THE TIME
        "@typescript-eslint/no-floating-promises": "off",
        "@typescript-eslint/explicit-function-return-type": "error",
        "@typescript-eslint/explicit-module-boundary-types": "error",
        "@typescript-eslint/array-type": "error",
        "@typescript-eslint/no-unused-vars": "warn",

        // override prettier
        "prettier/prettier": [
            "error",
            {},
            {
                "usePrettierrc": true
            }
        ]
    },
    "settings": {
        "import/resolver": {
            //eslint-plugin-import and eslint-import-resolver-typescript
            "node": {
                "extensions": [".js", ".ts"]
            },
            "typescript": {
                "alwaysTryTypes": true,
                "project": ["./tsconfig.json"]
            }
        }
    }
}
